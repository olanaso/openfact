/*******************************************************************************
 * Copyright 2016 Sistcoop, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.09.14 at 11:44:49 AM PET 
//

package org.openfact.models.jpa.entities;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Type;

@Entity
@Table(name = "ATTATCHED_DOCUMENT_ATTRIBUTE")
@NamedQueries({
        @NamedQuery(name="getAttatchedDocumentAttributesByNameAndValue", query="select attr from AttatchedDocumentAttributeEntity attr where attr.name = :name and attr.value = :value"),
        @NamedQuery(name="deleteAttatchedDocumentAttributesByNameAndAttatchedDocument", query="delete from  AttatchedDocumentAttributeEntity attr where attr.attatchedDocument.id = :attatchedDocumentId and attr.name = :name"),
        @NamedQuery(name="deleteAttatchedDocumentAttributesByNameAndAttatchedDocumentOtherThan", query="delete from  AttatchedDocumentAttributeEntity attr where attr.attatchedDocument.id = :attatchedDocumentId and attr.name = :name and attr.id <> :attrId"),
        @NamedQuery(name="deleteInvoiceAttatchedDocumentAttributesByOrganization", query="delete from AttatchedDocumentAttributeEntity attr where attr.attatchedDocument IN (select s from InvoiceAttatchedDocumentEntity s join s.invoice i where i.organizationId=:organizationId)"),
        @NamedQuery(name="deleteCreditNoteAttatchedDocumentAttributesByOrganization", query="delete from AttatchedDocumentAttributeEntity attr where attr.attatchedDocument IN (select s from CreditNoteAttatchedDocumentEntity s join s.creditNote i where i.organizationId=:organizationId)"),
        @NamedQuery(name="deleteDebitNoteAttatchedDocumentAttributesByOrganization", query="delete from AttatchedDocumentAttributeEntity attr where attr.attatchedDocument IN (select s from DebitNoteAttatchedDocumentEntity s join s.debitNote i where i.organizationId=:organizationId)")
})
public class AttatchedDocumentAttributeEntity {

    @Id
    @Column(name="ID", length = 36)
    @Access(AccessType.PROPERTY) // we do this because relationships often fetch id, but not entity.  This avoids an extra SQL
    protected String id;

    @ManyToOne(fetch= FetchType.LAZY)
    @JoinColumn(name = "ATTATCHED_DOCUMENT_ID")
    protected AttatchedDocumentEntity attatchedDocument;

    @Column(name = "NAME")
    protected String name;

    @Column(name = "VALUE")
    protected String value;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public AttatchedDocumentEntity getAttatchedDocument() {
        return attatchedDocument;
    }

    public void setAttatchedDocument(AttatchedDocumentEntity attatchedDocument) {
        this.attatchedDocument = attatchedDocument;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        if (!(o instanceof AttatchedDocumentAttributeEntity)) return false;

        AttatchedDocumentAttributeEntity that = (AttatchedDocumentAttributeEntity) o;

        if (!id.equals(that.getId())) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return id.hashCode();
    }
    
}
